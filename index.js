// Формат сдачи: ссылка на репозиторий.


// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

// Решение:

const musicCollection = [
	{ title: "Albom 1", artist: "Sting", year: "1989"},
	{ title: "Albom 2", artist: "Britny Spirs", year: "1995"},
	{ title: "Albom 3", artist: "The Biatles", year: "1975"}
];

const discCollection = {
	musicCollection: [...musicCollection],
	[Symbol.iterator]: function() {
			let index = 0;
			return {
					next: () => {
						if(index < this.musicCollection.length){
							return { value: this.musicCollection[index++], done: false };
						} else {
							return { done: true };
						}
					}
			};
	}
};

for (let disc of discCollection) {
		console.log(`${disc.title} by ${disc.artist}`);
}


// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.


// Решение:

const cooks = new Map();
cooks.set("Пицца", "Виктор");
cooks.set("Суши", "Ольга");
cooks.set("Десерты", "Дмитрий");

const alexeyDishs = new Set();
alexeyDishs.add('Пицца "Пепперони"');
alexeyDishs.add('Тирамису');

const MariaDishs = new Set();
MariaDishs.add('Суши "Калифорния"');
MariaDishs.add('Пицца "Маргарита"');

const IrinaDishs = new Set();
IrinaDishs.add('Чизкейк');

const orders = new Map();
orders.set("Алексей", alexeyDishs);
orders.set("Мария", MariaDishs);
orders.set("Ирина", IrinaDishs);


console.log(`Повара и их специализации:`);

console.log(`${cooks.get("Пицца")} - специализация: Пицца`);
console.log(`${cooks.get("Суши")} - специализация: Суши`);
console.log(`${cooks.get("Десерты")} - специализация: Десерты`);


console.log(`Блюда и их повара:`);

console.log(`Пицца "Маргарита" - повар: ${cooks.get("Пицца")}`);
console.log(`Пицца "Пепперони" - повар: ${cooks.get("Пицца")}`);
console.log(`Суши "Филадельфия" - повар: ${cooks.get("Суши")}`);
console.log(`Суши "Калифорния" - повар: ${cooks.get("Суши")}`);
console.log(`Тирамису - повар: ${cooks.get("Десерты")}`);
console.log(`Чизкейк - повар: ${cooks.get("Десерты")}`);

console.log(`Заказы:`);

console.log(`Клиент Алексей заказал: ${[...orders.get("Алексей")]}`);
console.log(`Клиент Мария заказала: ${[...orders.get("Мария")]}`);
console.log(`Клиент Ирина заказала: ${[...orders.get("Ирина")]}`);

